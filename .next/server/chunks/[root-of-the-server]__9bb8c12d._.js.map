{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///app/app/utils/api/science-problem/getAIResponse.ts"],"sourcesContent":["export default function getAIRresponse(resultText: any) {\n    // Get the AI response and parse it.\n    let problem: any;\n    try {\n        let sanitzedResult = resultText\n            .replace(/```json/g, '')\n            .replace(/```/g, '')\n            .trim()\n        return problem = JSON.parse(sanitzedResult);\n    } catch (error) {\n        let errMsg = 'Error parsing JSON from AI';\n        console.error(errMsg, error);\n        throw new Error(String(error));\n    }\n}\n"],"names":[],"mappings":";;;;AAAe,SAAS,eAAe,UAAe;IAClD,oCAAoC;IACpC,IAAI;IACJ,IAAI;QACA,IAAI,iBAAiB,WAChB,OAAO,CAAC,YAAY,IACpB,OAAO,CAAC,QAAQ,IAChB,IAAI;QACT,OAAO,UAAU,KAAK,KAAK,CAAC;IAChC,EAAE,OAAO,OAAO;QACZ,IAAI,SAAS;QACb,QAAQ,KAAK,CAAC,QAAQ;QACtB,MAAM,IAAI,MAAM,OAAO;IAC3B;AACJ","debugId":null}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///app/lib/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\nexport type Database = {\n  public: {\n    Tables: {\n      science_problem_sessions: {\n        Row: {\n          id: string\n          created_at: string\n          problem_text: string\n          correct_answer: number\n        }\n        Insert: {\n          id?: string\n          created_at?: string\n          problem_text: string\n          correct_answer: number\n        }\n        Update: {\n          id?: string\n          created_at?: string\n          problem_text?: string\n          correct_answer?: number\n        }\n      }\n      science_problem_submissions: {\n        Row: {\n          id: string\n          session_id: string\n          user_answer: number\n          is_correct: boolean\n          feedback_text: string\n        }\n        Insert: {\n          id?: string\n          session_id: string\n          user_answer: number\n          is_correct: boolean\n          feedback_text: string\n        }\n        Update: {\n          id?: string\n          session_id?: string\n          user_answer?: number\n          is_correct?: boolean\n          feedback_text?: string\n        }\n      }\n    }\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,IAAA,yMAAY,EAAC,aAAa","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///app/app/utils/api/science-problem/postGetResponse.ts"],"sourcesContent":["import { supabase } from \"../../../../lib/supabaseClient\";\n\nexport default async function postGetResponse(problem_text: String, final_answer: String) {\n    // Save AI response to supabase, then get it.\n    try {\n        const response = await supabase\n            .from('science_problem_sessions')\n            .insert([{ problem_text: problem_text, correct_answer: final_answer }])\n            .select()\n            .single();\n\n        if (response.error) throw response.error;\n\n        return response.data;\n\n    } catch (error) {\n        let errMsg = 'Supabase Error';\n        console.error(errMsg, error);\n        throw new Error(String(error));\n    }\n\n}"],"names":[],"mappings":";;;;AAAA;;AAEe,eAAe,gBAAgB,YAAoB,EAAE,YAAoB;IACpF,6CAA6C;IAC7C,IAAI;QACA,MAAM,WAAW,MAAM,mIAAQ,CAC1B,IAAI,CAAC,4BACL,MAAM,CAAC;YAAC;gBAAE,cAAc;gBAAc,gBAAgB;YAAa;SAAE,EACrE,MAAM,GACN,MAAM;QAEX,IAAI,SAAS,KAAK,EAAE,MAAM,SAAS,KAAK;QAExC,OAAO,SAAS,IAAI;IAExB,EAAE,OAAO,OAAO;QACZ,IAAI,SAAS;QACb,QAAQ,KAAK,CAAC,QAAQ;QACtB,MAAM,IAAI,MAAM,OAAO;IAC3B;AAEJ","debugId":null}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file:///app/app/utils/api/science-problem/generateAIResponse.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\nexport default async function generateAIResponse(prompt: string) {\n    // Google AI constants.\n    if (!process.env.GOOGLE_API_KEY) {\n        throw new Error('GOOGLE_API_KEY is not defined');\n    }\n    // Google AI constants.\n    const googleAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);\n    const googleAIModel = googleAI.getGenerativeModel({\n        model: 'gemini-2.5-flash'\n    });\n\n    // Results constants.\n    const result = await googleAIModel.generateContent(prompt);\n    const resultText = result.response.text();\n    return resultText;\n}"],"names":[],"mappings":";;;;AAAA;;AACe,eAAe,mBAAmB,MAAc;IAC3D,uBAAuB;IACvB,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;QAC7B,MAAM,IAAI,MAAM;IACpB;IACA,uBAAuB;IACvB,MAAM,WAAW,IAAI,sLAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc;IAClE,MAAM,gBAAgB,SAAS,kBAAkB,CAAC;QAC9C,OAAO;IACX;IAEA,qBAAqB;IACrB,MAAM,SAAS,MAAM,cAAc,eAAe,CAAC;IACnD,MAAM,aAAa,OAAO,QAAQ,CAAC,IAAI;IACvC,OAAO;AACX","debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///app/app/api/science-problem/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nimport getAIRresponse from '../../utils/api/science-problem/getAIResponse';\nimport postGetResponse from '../../utils/api/science-problem/postGetResponse';\nimport generateAIResponse from '../../utils/api/science-problem/generateAIResponse';\n\nexport async function POST(req: NextRequest) {\n\n    try {\n        const prompt = `\n            Generate a General Science subject fill in the blank question suitable for Grade 10 students in the Philippines.\n            Return it in JSON format with keys 'problem_text' and 'final_answer'.`;\n\n        let resultText = await generateAIResponse(prompt);\n\n        let aiResponse = getAIRresponse(resultText);\n\n        let problem_text = aiResponse.problem_text;\n        let final_answer = aiResponse.final_answer\n\n        let responseData = await postGetResponse(problem_text, final_answer);\n\n        // Return the problem text and the session id from database.\n        return NextResponse.json({ problem_text, sessionId: responseData.id }, { status: 200 })\n\n    } catch (error) {\n        console.error('Path /api/science-problem error:', error);\n\n        let errMsg = 'Error generating science problem';\n        return NextResponse.json(\n            {\n                error: errMsg,\n                details: error instanceof Error ? error.message : 'Unknown error occured.'\n            },\n            { status: 500 })\n    }\n}"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAgB;IAEvC,IAAI;QACA,MAAM,SAAS,CAAC;;iFAEyD,CAAC;QAE1E,IAAI,aAAa,MAAM,IAAA,4KAAkB,EAAC;QAE1C,IAAI,aAAa,IAAA,uKAAc,EAAC;QAEhC,IAAI,eAAe,WAAW,YAAY;QAC1C,IAAI,eAAe,WAAW,YAAY;QAE1C,IAAI,eAAe,MAAM,IAAA,yKAAe,EAAC,cAAc;QAEvD,4DAA4D;QAC5D,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE;YAAc,WAAW,aAAa,EAAE;QAAC,GAAG;YAAE,QAAQ;QAAI;IAEzF,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,oCAAoC;QAElD,IAAI,SAAS;QACb,OAAO,gJAAY,CAAC,IAAI,CACpB;YACI,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACtD,GACA;YAAE,QAAQ;QAAI;IACtB;AACJ","debugId":null}}]
}